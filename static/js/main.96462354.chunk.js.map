{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","labels","datasets","label","data","backgroundColor","chartOptions","scales","yAxes","ticks","beginAtZero","react_default","a","createElement","className","es","options","Component","App","header","initializeComponents","components","components_Chart","component","componentsRenderList","run","length","push","renderComponent","map","componentID","componentRenderClass","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAiDeA,cA7Cd,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACZC,UAAU,CACTC,OAAQ,CAAC,UAAU,UAAU,aAC7BC,SAAU,CACT,CACCC,MAAO,aACPC,KAAM,CACL,IACA,IACA,KAEDC,gBAAgB,CACf,MACA,MACA,UAKJC,aAAa,CACTC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,QAzBblB,wEAkCjB,OACCmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACCX,KAAMT,KAAKI,MAAMC,UACjBgB,QAASrB,KAAKI,MAAMO,uBAvCLW,aC8CLC,cA3Cb,SAAAA,EAAY3B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACjB1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAMJ,KACD4B,OAASR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAMH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,iCACnCtB,EAAK4B,uBAHY5B,sFAOjBG,KAAK0B,WAAa,GAClB1B,KAAK0B,WAAL,MAA2BV,EAAAC,EAAAC,cAACS,EAAD,8CAGZC,GACf,OAAOZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAEZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wDACbnB,KAAK0B,WAAWE,IAElBZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6EAQvB,IADA,IAAIU,EAAuB,GACnBC,EAAI,EAAEA,EAAI9B,KAAK0B,WAAWK,OAAOD,IACxCD,EAAqBG,KAAKhC,KAAKiC,gBAAgBjC,KAAK0B,WAAWI,KAEhE,OAAOD,mCAIN,OACGb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbnB,KAAKwB,OACLxB,KAAK0B,WAAWQ,IAAI,SAASC,EAAYC,GAAsB,OAAOpC,KAAKiC,gBAAgBE,aAvClFb,aCQEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yECVNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.96462354.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nclass Chart extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tchartData:{\r\n\t\t\t\tlabels: ['Toronto','Calgary','Vancouver'],\r\n\t\t\t\tdatasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Population',\r\n\t\t\t\t\t\tdata: [\r\n\t\t\t\t\t\t\t500000,\r\n\t\t\t\t\t\t\t600000,\r\n\t\t\t\t\t\t\t700000\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tbackgroundColor:[\r\n\t\t\t\t\t\t\t'red',\r\n\t\t\t\t\t\t\t'red',\r\n\t\t\t\t\t\t\t'red'\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tchartOptions:{\r\n    \t\t\tscales: {\r\n        \t\t\tyAxes: [{\r\n            \t\t\tticks: {\r\n                \t\t\tbeginAtZero: true\r\n            \t\t\t}\r\n        \t\t\t}]\r\n    \t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"chart\">\r\n\t\t\t\t<Bar\r\n\t\t\t\t\tdata={this.state.chartData}\r\n\t\t\t\t\toptions={this.state.chartOptions}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Chart","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\n\nclass App extends Component {\n\n  constructor(props){\n  \tsuper(props);\n  \tthis.header = <div className=\"row\"><span className=\"main-header\">Digital Resume - Ahsan Mirza</span></div>\n  \tthis.initializeComponents();\n  }\n\n  initializeComponents() {\n  \tthis.components = [];\n  \tthis.components['Chart'] = <Chart />\n  }\n\n  renderComponent(component) {\n  \treturn\t<div className=\"container\">\n    \t\t\t<div className=\"row\">\n    \t\t\t\t<div className=\"col-lg-2 col-md-2 col-sm-12\">\n        \t\t\t</div>\n        \t\t\t<div className=\"col-lg-8 col-md-8 col-sm-12 border-top border-bottom\">\n        \t\t\t\t{this.components[component]}\n        \t\t\t</div>\n        \t\t\t<div className=\"col-lg-2 col-md-2 col-sm-12\">\n        \t\t\t</div>\n        \t\t</div>\n    \t\t</div>\n  }\n\n  renderComponents() {\n  \tvar componentsRenderList = [];\n  \tfor(var run=0;run<this.components.length;run++){\n  \t\tcomponentsRenderList.push(this.renderComponent(this.components[run]));\n  \t}\n  \treturn componentsRenderList;\n  }\n\n  render() {\n    return (\n      \t<div className=\"container\">\n      \t\t{this.header}\n      \t\t{this.components.map(function(componentID,componentRenderClass){return this.renderComponent(componentID)})}\n      \t</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/main.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}